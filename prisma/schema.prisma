// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  username  String   @unique
  password  String
  picture   String?
  teamId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  properties       Property[] // Propriedades associadas ao usuário
  messagesSent     Message[]    @relation("SentMessages") // Mensagens enviadas pelo usuário
  messagesReceived Message[]    @relation("ReceivedMessages") // Mensagens recebidas pelo usuário
  teamMemberships  TeamMember[] // Relacionamento com equipes que o usuário pertence
}

model Property {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  description1 String?
  price        Float
  latitude     Float
  longitude    Float
  category     String
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id])
  images Image[] // Imagens associadas à propriedade
}

model Image {
  id         Int      @id @default(autoincrement())
  url        String
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  timestamp  DateTime @default(now())
  senderId   Int
  receiverId Int
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Team {
  id        Int          @id @default(autoincrement())
  name      String
  imageUrl  String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  members   TeamMember[] // Relacionamento com os membros da equipe
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  teamId    Int
  userId    Int
  createdAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([teamId, userId]) // Garantir que um usuário não se repita na mesma equipe
}
